@page "/"
@using MyScoreBoardShared.Services
@inject IGameService Game
@inject ILocalStorageService LocalStorage
@inject IPlatformService Platform
@inject NavigationManager Nav

<PageTitle>My Score Keeper</PageTitle>

<div class="hero animate-fade-in-up">
    <h1>🎮 Game Score Keeper</h1>
    <p>Track scores, compete with friends, and never lose count again!</p>
    
    <div class="d-flex flex-column flex-sm-row gap-3 justify-content-center">
        <button class="btn btn-primary btn-lg animate-pulse" @onclick="NewGame">
            <i class="bi bi-plus-circle-fill me-2"></i>
            Start New Game
        </button>
        
        @if (hasActive)
        {
            <button class="btn btn-success btn-lg" @onclick="Resume">
                <i class="bi bi-play-fill me-2"></i>
                Resume Game
            </button>
        }
        
        <button class="btn btn-secondary btn-lg" @onclick="ViewHistory">
            <i class="bi bi-clock-history me-2"></i>
            View History
        </button>
    </div>
</div>

<div class="row g-4 mt-4">
    <div class="col-md-4">
        <div class="glass-card p-4 text-center h-100">
            <i class="bi bi-people-fill fs-1 mb-3" style="color: var(--bs-primary); text-shadow: 0 1px 2px rgba(0,0,0,0.2);"></i>
            <h4 class="text-contrast">Multiplayer Ready</h4>
            <p class="text-contrast-muted">Add unlimited players and track everyone's progress</p>
        </div>
    </div>
    <div class="col-md-4">
        <div class="glass-card p-4 text-center h-100">
            <i class="bi bi-arrow-clockwise fs-1 mb-3" style="color: var(--bs-success); text-shadow: 0 1px 2px rgba(0,0,0,0.2);"></i>
            <h4 class="text-contrast">Round System</h4>
            <p class="text-contrast-muted">Organize scoring by rounds for better game flow</p>
        </div>
    </div>
    <div class="col-md-4">
        <div class="glass-card p-4 text-center h-100">
            <i class="bi bi-cloud-check-fill fs-1 mb-3" style="color: var(--bs-info); text-shadow: 0 1px 2px rgba(0,0,0,0.2);"></i>
            <h4 class="text-contrast">Auto Save</h4>
            <p class="text-contrast-muted">Never lose your game progress with automatic saving</p>
        </div>
    </div>
</div>

@if (Platform.IsWebAssembly)
{
    <div class="row g-4 mt-1">
        <div class="col-12">
            <div class="glass-card p-4 d-flex flex-column flex-md-row align-items-center justify-content-between">
                <div class="d-flex align-items-center mb-3 mb-md-0">
                    <i class="bi bi-apple fs-1 me-3" style="color: #ffffff; text-shadow: 0 1px 3px rgba(0,0,0,0.4);"></i>
                    <div>
                        <h4 class="mb-1 text-contrast">Download for iOS</h4>
                        <p class="mb-0 text-contrast-muted">Get the native iOS app for the best mobile experience.</p>
                    </div>
                </div>
                <a class="btn btn-primary" href="https://apps.apple.com/us/app/my-score-keeper-scoreboard/id1191033523" target="_blank" rel="noopener noreferrer" role="button">
                    <i class="bi bi-download me-2"></i>
                    Get iOS App
                </a>
            </div>
        </div>
    </div>
}

<div class="row g-4 mt-1">
    <div class="col-12">
        <div class="glass-card p-4 d-flex flex-column flex-md-row align-items-center justify-content-between">
            <div class="d-flex align-items-center mb-3 mb-md-0">
                <i class="bi bi-github fs-1 me-3" style="color: #ffffff; text-shadow: 0 1px 3px rgba(0,0,0,0.4);"></i>
                <div>
                    <h4 class="mb-1 text-contrast">Open source on GitHub</h4>
                    <p class="mb-0 text-contrast-muted">Star the repo, file issues, or contribute features and fixes.</p>
                </div>
            </div>
            <a class="btn btn-primary" href="https://github.com/jamesmontemagno/blazor-scorekeeper" target="_blank" rel="noopener noreferrer" role="button">
                <i class="bi bi-box-arrow-up-right me-2"></i>
                View on GitHub
            </a>
        </div>
    </div>
    
</div>

@code {
    private bool hasActive = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Quick check from localStorage first
            hasActive = await LocalStorage.GetHasActiveGameAsync();
            StateHasChanged();
            
            // Then verify with IndexedDB in the background
            _ = Task.Run(async () =>
            {
                var actualHasActive = await Game.HasActiveGameAsync();
                if (actualHasActive != hasActive)
                {
                    hasActive = actualHasActive;
                    await InvokeAsync(StateHasChanged);
                }
            });
        }
    }

    private void NewGame() => Nav.NavigateTo("/setup");
    
    private async Task Resume() 
    {
        var loaded = await Game.LoadActiveAsync();
        if (loaded)
        {
            Nav.NavigateTo("/play");
        }
        else
        {
            hasActive = false;
            StateHasChanged();
        }
    }
    
    private void ViewHistory() => Nav.NavigateTo("/history");
}